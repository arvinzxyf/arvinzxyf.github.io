[{"id":"1d7991152b4115ddab46534c2d347049","title":"打印字符","content":"打印字符描述输入一个ASCII码，输出对应的字符\n输入一个整数，即字符的ASCII码，保证存在对应的可见字符\n输出一行，包含相应的字符\n样例输入65\n\n样例输出A\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    int asc_num;\n    scanf(&quot;%d&quot;, &amp;asc_num);\n    printf(&quot;%c&quot;, asc_num);\n    return 0;\n&#125;\n","slug":"打印字符","date":"2022-03-24T16:06:31.961Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"6be454ad9b0d0d55473c40cb4ba26c8b","title":"鸡尾酒疗法","content":"鸡尾酒疗法描述鸡尾酒疗法，原指“高效抗逆转录病毒治疗”（HAART），由美籍华裔科学家何大一于1996年提出，是通过三种或三种以上的抗病毒药物联合使用来治疗艾 滋病。该疗法的应用可以减少单一用药产生的抗药性，最大限度地抑制病毒的复制，使被破坏的机体免疫功能部分甚至全部恢复，从而延缓病程进展，延长患者生 命，提高生活质量。人们在鸡尾酒疗法的基础上又提出了很多种改进的疗法。为了验证这些治疗方法是否在疗效上比鸡尾酒疗法更好，可用通过临床对照实验的方式 进行。假设鸡尾酒疗法的有效率为x，新疗法的有效率为y，如果y-x大于5%，则效果更好，如果x-y大于5%，则效果更差，否则称为效果差不多。下面给 出n组临床对照实验，其中第一组采用鸡尾酒疗法，其他n-1组为各种不同的改进疗法。请写程序判定各种改进疗法效果如何。\n输入第一行为整数n（ 1 &lt; n &lt;&#x3D; 20）；其余n行每行两个整数，第一个整数是临床实验的总病例数(小于等于10000)，第二个疗效有效的病例数；这n行数据中，第一行为鸡尾酒疗法的数据，其余各行为各种改进疗法的数据。\n输出有n-1行输出，分别表示对应改进疗法的效果：如果效果更好，输出better；如果效果更差，输出worse；否则输出same。\n样例输入5\n125  99\n112  89\n145  99\n99   97\n123  98\n\n样例输出same\nworse\nbetter\nsame\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;math.h&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    int n, total_a, num_a, total_b, num_b;\n    double rate_a, rate_b;\n    cin &gt;&gt; n;\n    for (int i &#x3D; 0;i &lt; n;++i)&#123;\n    \tif (i &#x3D;&#x3D; 0)&#123;\n    \t\tcin &gt;&gt; total_a &gt;&gt; num_a;\n    \t\trate_a &#x3D; (double) num_a &#x2F; total_a;\n    \t&#125;\n    \telse&#123;\n    \t\tcin &gt;&gt; total_b &gt;&gt; num_b;\n    \t\trate_b &#x3D; (double) num_b &#x2F; total_b;\n    \t\tif(rate_b - rate_a &gt; 0.05) cout &lt;&lt; &quot;better&quot; &lt;&lt; endl;\n    \t\telse if (rate_a - rate_b &gt; 0.05) cout &lt;&lt; &quot;worse&quot; &lt;&lt; endl;\n    \t\telse cout &lt;&lt; &quot;same&quot; &lt;&lt; endl;\n\t\t&#125;\n\t&#125;\n\treturn 0;\n&#125;\n","slug":"鸡尾酒疗法","date":"2022-03-24T16:06:02.053Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"f99958805dc43ebb1523c4442b806b3f","title":"Github+Hexo搭建属于自己的博客","content":"最近的学习生活繁忙，让我萌生了想要搭建一个博客记录自己学习和生活的念头，因此我马上在互联网上寻找解决方案，发现如果自己租用服务器进行搭建，不仅费用不小，学习成本也比较高。所以我认为对于大部分不想太折腾的小白来说，Github+Hexo的解决方案是更加实用的。\n因此，如果你也想拥有一个属于自己的博客，那么就快看下去吧！\n\n\n\n\n\n\n\n\nTIP\n操作系统：Windows 10\n\n第一步：安装软件并配置环境1、安装Node.js(LTS)\n\n\n2、安装Git\n\n\nGit的安装过程可能有些复杂，因此在安装的过程中可以参考Git安装教程(作者：hdlan)。\n注：根据我自己的安装经验，在安装完Git之后需要手动将\\Git\\bin和\\Git\\mingw64\\libexec\\git-core添加至系统环境变量\n\n\n红色方框内的路径由你自己的安装位置决定。\n在完成1、2步之后，打开Git Bash\n\n\n分别执行git --version和NPM -v命令，如安装无误，将出现版本号，如下图所示：\n\n\n第二步：安装Hexo1、选择一个你电脑除C盘外的其他盘，并创建blog文件夹。\n2、打开电脑的命令提示符，进入刚才创建的blog文件夹。\n以我的路径为例：D:\\blog，因此我们需要在命令提示符中分别输入D:和cd blog，如下图所示：\n\n\nD:的意思是进入D盘，cd xxx的意思是进入xxx这个文件夹。\n3、接下来分别输入下面三条命令（每条输入后需按回车键执行）：\nnpm install hexo-cli -g\nhexo init\nnpm install\n\n在命令运行的过程中不出现ERR!的错误提示即可，WARN 的警告提示可以忽略，不影响正常安装。\n4、在本地预览网站\n在命令提示符中输入hexo s --debug（注意，此时所有的命令行操作都是在blog文件夹下进行的）\n\n\n打开自己的浏览器，然后在地址栏输入上图中显示的地址：http://localhost:4000\n\n\n\n\n\n\n\nWARNING\n如果这一步没有成功，很有可能是默认的4000端口已经被占用\n可以使用hexo server -p 5000命令更改默认端口后再重新执行\n\n\n\n如果网页出现了上图的博客页面，则说明我们的博客已经搭建成功了\n每次编辑完新的博客后，都可以先在本地预览，确认无误后再发布（如何发布我们将在后面介绍）\n但是此时，我们只能在本地访问，因此接下来我们要做的，就是将其推送至网站。\n第三步：推送至网站1、创建Github仓库（Github不幸被墙，这里可能需要一些上网方法来解决）\n首先，创建一个Github账户（username要认真填写，会与之后你博客的网址有关）\n注册完成后点击New repository创建新的仓库，如下图所示：\n\n\nRepository name一栏为仓库名称，填写username.github.io，username就是你的账户名称\n\n\n然后按照上图指示勾选对应选项后，点击Create repository键完成创建。\n2、修改_config.yml文件\n进入blog文件夹，找到_config.yml文件并打开（使用Sublime Text或Notepad++等文本编辑软件）\n\n\n打开后将文件拖至最下方，找到deploy项，将其内容修改为：\ndeploy:\n\ttype: git\n\trepo: 你的仓库地址（如下图所示）\n\tbranch: master(若在安装Git的第六步时选择了第一个默认选项，则此处为master，否则就填写你自己修改的名称)\n\n\n\n修改完成后记得按CTRL+S保存文件。\n3、链接Github远程仓库\n在blog文件夹内右键，点击Git Bash Here，进入Git Bash\n\n\n分别输入以下命令（每条输入后需按回车键执行）：\ngit config --global user.name &quot;username&quot; （引号内填写Github用户名）\ngit config --global user.email &quot;your email address&quot;（引号内填写Github注册时使用的邮箱）\nssh-keygen -t rsa -c &quot;your email address&quot;（引号内同上）\n\n完成以上步骤后会生成密钥（生成的目录会在命令行内显示，应该是C:\\Users\\username\\.ssh）\n打开id_rsa.pub文件（可以使用Sublime Text或Notepad++等），并复制里面的全部内容。\n打开Github，进入Settings\n\n\n选择SSH and GPG keys，并点击New SSH key，如下图所示：\n\n\n将之前从id_rsa.pub文件内复制的内容全部粘贴到Key栏内，Title可以任意写\n\n\n再次打开Git Bash，输入ssh -T git@github.com，如果出现Hi, xxx!则说明链接成功。\n4、安装Git部署插件\n打开命令提示符，进入blog文件（步骤同上），输入以下命令：\nnpm install hexo-deployer-git --save\n\n第四步：部署并发布在部署发布你的博客之前，我先为大家介绍一些基本的Hexo命令：\nnpm install hexo -g # 安装Hexo\nnpm update hexo -g # 升级Hexo\n\nhexo n &quot;title&quot; &#x3D;&#x3D; hexo new &quot;title&quot; # 创建一篇新博客，title处填写博客题目\nhexo clean # 清除生成的博客静态文件\nhexo g # 生成博客静态文件(hexo generate)\nhexo d # 部署博客(hexo deploy)\nhexo s --debug # 本地预览博客\n\n那么接下来我们开始正式部署网站\n打开命令提示符，并进入blog文件夹（步骤同上），分别输入以下命令：\nhexo clean\nhexo g\nhexo d\n\n完成后打开浏览器，在地址栏输入你的仓库地址，即username.github.io\n如果出现博客页面，那么恭喜你，你的博客已经可以在互联网上被访问了。\n第五步：绑定域名实际上，上一步结束之后，你的博客已经算是搭建完成了，但是网址是Github提供的：username.github.io，许多小伙伴希望能够使用自己的个性化域名，这就需要进行域名绑定，因此__没有这方面需求的小伙伴可以跳过这一步__。\n1、域名部分的设置\n选择一个域名代理厂商，本文以阿里云为例（腾讯云、百度云、华为云等均可）\n具体的注册申请过程，这里将不再呈现，点击进入对应厂商的网页，查询你喜欢的个性化域名，进行注册购买即可，如果你本来就有空闲的域名，那么直接进入下一步。\n域名准备好之后，进入对应厂商的域名控制台的域名列表，进入解析页面\n\n\n创建两条记录，每一项填写的内容如下表，未说明的项默认就好：\n\n\n\n主机记录\n记录类型\n解析路线(isp)\n记录值\n\n\n\nwww\nCNAME\n默认\nusername.github.io\n\n\n@\nA\n默认\n185.199.108.153\n\n\n注：这里是Github的IP地址，你也可以ping以下自己的博客网址得到IP地址，方法如下：\n打开命令提示符，执行ping username.github.io(username是你自己的Github账户名)\n\n\n如果是刚刚注册的域名，建议修改一遍DNS服务器，进入管理页面\n\n\n进入DNS修改，并点击页面右方的修改DNS服务器\n\n\n将当前DNS服务器下的两个DNS分别填入下方，并点击确认即可。\n\n\n2、Github部分的设置\n打开Github，进入之前创建的仓库页面，进入Settings\n\n\n进入Pages页面，将Source项下的的Branch: main改为Branch: master（若在安装Git的第六步时选择了第一个默认选项，则此处为master，否则就选择你自己修改的名称）\n接下来在Custom domain项内填入你的域名，并点击Save保存，最后选中下面的Enforce HTTPS\n\n\n3、本地部分的设置\n进入本地的blog文件夹，进入blog\\source目录下，创建一个记事本文件，输入你的域名\n\n\n\n\n\n\n\n\n\nWARNING\n注意，建议这里输入的域名不要带www，如上图所示\n保存并命名为CNAME，注意保存成__所有文件__而不是__txt文件__\n\n完成以上步骤后，打开命令提示符，进入blog文件夹并分别执行下面的代码：\nhexo clean\nhexo g\nhexo d\n\n执行完成后打开浏览器，在地址栏输入你自己的域名，就会直接进入你的博客了。\n至此，本篇教程也就到此结束了，有任何问题都可以E-mail联系我！！感谢支持哟~~\n","slug":"Github-Hexo搭建属于自己的博客","date":"2022-03-24T12:36:33.201Z","categories_index":"Hexo","tags_index":"Hexo","author_index":"ARVIN"},{"id":"3b7a6a98c80d746aa2d3d6483c18a532","title":"角谷猜想","content":"角谷猜想描述所谓角谷猜想，是指对于任意一个正整数，如果是奇数，则乘3加1，如果是偶数，则除以2，得到的结果再按照上述规则重复处理，最终总能够得到1。如，假定初始整数为5，计算过程分别为16、8、4、2、1。程序要求输入一个整数，将经过处理得到1的过程输出来。\n输入一个正整数N(N &lt;&#x3D; 2,000,000)。\n输出从输入整数到1的步骤，每一步为一行，每一部中描述计算过程。最后一行输出”End”。如果输入为1，直接输出”End”。\n样例输入5\n\n样例输出5*3+1&#x3D;16\n16&#x2F;2&#x3D;8\n8&#x2F;2&#x3D;4\n4&#x2F;2&#x3D;2\n2&#x2F;2&#x3D;1\nEnd\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;math.h&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    long long n, n2;\n    scanf(&quot;%ld&quot;, &amp;n);\n    if (n &#x3D;&#x3D; 1) printf(&quot;End\\n&quot;);\n    else &#123;\n    \tdo&#123;\n    \t\tif (n % 2 !&#x3D; 0)&#123;\n    \t\t\tn2 &#x3D; (n * 3) + 1;\n    \t\t\tprintf(&quot;%ld*3+1&#x3D;%ld\\n&quot;, n, n2);\n    \t\t\tn &#x3D; n2;\n\t\t\t&#125;\n\t\t\telse&#123;\n\t\t\t\tn2 &#x3D; n &#x2F; 2;\n\t\t\t\tprintf(&quot;%ld&#x2F;2&#x3D;%ld\\n&quot;, n, n2);\n\t\t\t\tn &#x3D; n2;\n\t\t\t&#125;\n\t\t&#125;while (n !&#x3D; 1);\n\t\tprintf(&quot;End\\n&quot;);\n\t&#125;\n\treturn 0;\n&#125;\n","slug":"角谷猜想","date":"2022-03-24T16:02:18.428Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"2ec4b2a452226332a7592d1b1c4306bb","title":"浮点型数据类型存储空间大小","content":"浮点型数据类型存储空间大小描述分别定义float，double类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。\n输入无\n输出一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开\n样例输入（无）\n\n样例输出（不提供）\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    float a;\n    double b;\n    char space &#x3D; &#39; &#39;;\n    printf(&quot;%d%c%d&quot;, sizeof(a), space, sizeof(b));\n    return 0;\n&#125;\n","slug":"浮点型数据类型存储空间大小","date":"2022-03-24T16:00:57.339Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"51ec2b86c6b25e2cee785cc4a7bf7196","title":"整型数据类型存储空间大小","content":"整型数据类型存储空间大小描述分别定义int，short类型的变量各一个，并依次输出它们的存储空间大小（单位：字节）。\n输入无\n输出一行，两个整数，分别是两个变量的存储空间大小，用一个空格隔开\n样例输入（无）\n\n样例输出（不提供）\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    int a;\n    short b;\n    char space &#x3D; &#39; &#39;;\n    printf(&quot;%d%c%d&quot;, sizeof(a), space, sizeof(b));\n    return 0;\n&#125;\n","slug":"整型数据类型存储空间大小","date":"2022-03-24T16:00:07.503Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"61d2ed2d129e9f58a40f6b9411f8aca9","title":"打印ASCII码","content":"打印ASCII码描述输入一个除空格以外的可见字符（保证在函数scanf中可使用格式说明符%c读入），输出其ASCII码。\n输入一个除空格以外的可见字符。\n输出一个十进制整数，即该字符的ASCII码。\n样例输入A\n\n样例输出65\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    char ch;\n    scanf(&quot;%c&quot;, &amp;ch);\n    printf(&quot;%d&quot;, ch);\n    return 0;\n&#125;\n","slug":"打印ASCII码","date":"2022-03-24T15:58:31.130Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"221d04ca4e8ff67199d7661ca239b251","title":"求特殊自然数","content":"求特殊自然数描述一个十进制自然数,它的七进制与九进制表示都是三位数，且七进制与九进制的三位数码表示顺序正好相反。编程求此自然数,并输出显示。\n输入无\n输出三行：第一行是此自然数的十进制表示；第二行是此自然数的七进制表示；第三行是此自然数的九进制表示。\n样例输入（无）\n\n样例输出（不提供）\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;math.h&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    int num7 &#x3D; 0, num9 &#x3D; 0, n, i &#x3D; 49,final &#x3D; 0, num7fan, num9fan, num7zheng, num9zheng;\n\twhile (true)&#123;\n\t\tn &#x3D; i;\n    \tdo&#123;\n    \t\tnum7 *&#x3D; 10;\n\t\t\tnum7 +&#x3D; n % 7;\n\t\t\tn &#x2F;&#x3D; 7;\n\t\t&#125;while(n !&#x3D; 0); \n\t\tnum7fan &#x3D; num7;\n\t\tn &#x3D; i;\n\t\tdo&#123;\n    \t\tnum9 *&#x3D; 10;\n\t\t\tnum9 +&#x3D; n % 9;\n\t\t\tn &#x2F;&#x3D; 9;\n\t\t&#125;while(n !&#x3D; 0);\t\n\t\tnum9fan &#x3D; num9;\n\t\t\n\t\tif (num7 % 10 &#x3D;&#x3D; 0)\n    \t\tnum7 &#x2F;&#x3D; 10;\n    \tdo&#123;\n    \t\tfinal *&#x3D; 10;\n\t\t\tfinal +&#x3D; num7 % 10;\n    \t\tnum7 &#x2F;&#x3D; 10;\n\t\t&#125;while(num7 !&#x3D; 0);\n\t\tnum7zheng &#x3D; final;\n\n\t\tfinal &#x3D; 0;\n\t\tif (num9 % 10 &#x3D;&#x3D; 0)\n    \t\tnum9 &#x2F;&#x3D; 10;\n    \tdo&#123;\n    \t\tfinal *&#x3D; 10;\n\t\t\tfinal +&#x3D; num9 % 10;\n    \t\tnum9 &#x2F;&#x3D; 10;\n\t\t&#125;while(num9 !&#x3D; 0);\n\t\tnum9zheng &#x3D; final;\n\t\t\n\t\tif (num7fan &#x3D;&#x3D; num9zheng)&#123;\n\t\t\tprintf(&quot;%d\\n%d\\n%d&quot;, i, 503, num9zheng);\n\t\t\tbreak;\n\t\t&#125;\n\t\ti ++;\n\t&#125;\n\treturn 0;\n&#125;\n","slug":"求特殊自然数","date":"2022-03-24T15:57:32.442Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"3915d74bfff2752fd680d9863a369088","title":"字符菱形","content":"字符菱形描述给定一个字符，用它构造一个对角线长5个字符，倾斜放置的菱形。\n输入输入只有一行， 包含一个字符。\n输出该字符构成的菱形。\n样例输入*\n\n样例输出  *\n ***\n*****\n ***\n  *\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    char space &#x3D; &#39; &#39;, ch;\n    scanf(&quot;%c&quot;, &amp;ch);\n    printf(&quot;%c%c%c\\n&quot;, space, space, ch);\n    printf(&quot;%c%c%c%c\\n&quot;, space, ch, ch, ch);\n    printf(&quot;%c%c%c%c%c\\n&quot;, ch, ch, ch, ch, ch);\n    printf(&quot;%c%c%c%c\\n&quot;, space, ch, ch, ch);\n    printf(&quot;%c%c%c\\n&quot;, space, space, ch);\n    return 0;\n&#125;\n","slug":"字符菱形","date":"2022-03-24T15:56:51.337Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"067eb03861968f9a5583c374e392720b","title":"数字反转","content":"数字反转描述给定一个整数，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零（参见样例2）。\n输入输入共 1 行，一个整数N。\n-1,000,000,000 ≤ N≤ 1,000,000,000\n输出输出共 1 行，一个整数，表示反转后的新数。\n样例输入样例 #1：\n123\n\n样例 #2：\n-380\n\n样例输出样例 #1：\n321\n\n样例 #2：\n-83\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    long long n, final &#x3D; 0;\n    cin &gt;&gt; n;\n    if (n % 10 &#x3D;&#x3D; 0)\n    \tn &#x2F;&#x3D; 10;\n    do&#123;\n    \tfinal *&#x3D; 10;\n\t\tfinal +&#x3D; n % 10;\n    \tn &#x2F;&#x3D; 10;\n\t&#125;while(n !&#x3D; 0);\n\tcout &lt;&lt; final;\n\treturn 0;\n&#125;\n","slug":"数字反转","date":"2022-03-24T15:54:52.757Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"1a0cdf31a5971829016ab8299eecc91d","title":"奥运奖牌计数","content":"奥运奖牌计数描述2008年北京奥运会，A国的运动员参与了n天的决赛项目(1≤n≤17)。现在要统计一下A国所获得的金、银、铜牌数目及总奖牌数。\n输入输入n＋1行，第1行是A国参与决赛项目的天数n，其后n行，每一行是该国某一天获得的金、银、铜牌数目，以一个空格分开。\n输出输出1行，包括4个整数，为A国所获得的金、银、铜牌总数及总奖牌数，以一个空格分开。\n样例输入3\n1  0  3\n3  1  0\n0  3  0\n\n样例输出4  4  3  11\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;math.h&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    int n, jin, yin, tong, jin_sum &#x3D; 0, yin_sum &#x3D; 0, tong_sum &#x3D; 0;\n    cin &gt;&gt; n;\n    for (int i &#x3D; 0;i &lt; n;++i)&#123;\n\t\tcin &gt;&gt; jin &gt;&gt; yin &gt;&gt; tong;\n    \tjin_sum +&#x3D; jin;\n    \tyin_sum +&#x3D; yin;\n    \ttong_sum +&#x3D; tong;\n\t&#125;\n\tcout &lt;&lt; jin_sum &lt;&lt; &quot; &quot;&lt;&lt; yin_sum &lt;&lt; &quot; &quot;&lt;&lt; tong_sum &lt;&lt; &quot; &quot;&lt;&lt; jin_sum + yin_sum + tong_sum &lt;&lt; endl;\n\treturn 0;\n&#125;\n","slug":"奥运奖牌计数","date":"2022-03-24T15:51:56.239Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"ac05e299c896fafeaf879961438f88db","title":"苹果和虫子2","content":"苹果和虫子2描述你买了一箱n个苹果，很不幸的是买完时箱子里混进了一条虫子。虫子每x小时能吃掉一个苹果，假设虫子在吃完一个苹果之前不会吃另一个，那么经过y小时你还有多少个完整的苹果？\n输入输入仅一行，包括n，x和y（均为整数）。\n输出输出也仅一行，剩下的苹果个数。\n样例输入10  4  9\n\n样例输出7\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;math.h&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    int n, x, y;\n    cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;\n    if (x &lt;&#x3D; y)&#123;\n    \tif (y % x &#x3D;&#x3D; 0)\n    \t\tif (y &#x2F; x &lt;&#x3D; n)\n    \t\t\tcout &lt;&lt; n - (y &#x2F; x) &lt;&lt; endl;\n    \t\telse cout &lt;&lt; 0 &lt;&lt; endl;\n    \telse \n\t\t\tif ((y &#x2F; x) + 1 &lt;&#x3D; n)\n\t\t\t\tcout &lt;&lt; n - ((y &#x2F; x) + 1) &lt;&lt; endl;\n\t\t\telse cout &lt;&lt; 0 &lt;&lt; endl;\n\t&#125;\n\telse if (x &gt; y &amp;&amp; y !&#x3D; 0)\n\t\tcout &lt;&lt; n - 1 &lt;&lt; endl;\n\telse cout &lt;&lt; n &lt;&lt; endl;\n\treturn 0;\n&#125;\n","slug":"苹果和虫子","date":"2022-03-24T15:51:42.923Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"a6d0295cac50a3997d1f089ffd724d3f","title":"求一元二次方程的根","content":"求一元二次方程的根描述利用公式x1 &#x3D; (-b + sqrt(bb-4ac))&#x2F;(2a), x2 &#x3D; (-b - sqrt(bb-4ac))&#x2F;(2a)求一元二次方程ax2+ bx + c &#x3D;0的根，其中a不等于0。\n输入输入一行，包含三个浮点数a, b, c（它们之间以一个空格分开），分别表示方程ax2 + bx + c &#x3D;0的系数。\n输出输出一行，表示方程的解。若b2 &#x3D; 4 * a * c,则两个实根相等，则输出形式为：x1&#x3D;x2&#x3D;…；若b2 &gt; 4 * a * c,则两个实根不等，则输出形式为：x1&#x3D;…;x2 &#x3D; …，其中x1&gt;x2；若b2 &lt; 4 * a * c，则有两个虚根，则输出：x1&#x3D;实部+虚部i; x2&#x3D;实部-虚部i，即x1的虚部系数大于等于x2的虚部系数，实部为0时不可省略。实部 &#x3D; -b &#x2F; (2a)，虚部 &#x3D; sqrt(4ac-bb) &#x2F; (2*a)\n所有实数部分要求精确到小数点后5位，数字、符号之间没有空格。\n样例输入样例输入1\n1.0  2.0  8.0\n\n样例输入2\n1  0  1\n\n样例输出样例输出1\nx1&#x3D;-1.00000+2.64575i;x2&#x3D;-1.00000-2.64575i\n\n样例输出2\nx1&#x3D;0.00000+1.00000i;x2&#x3D;0.00000-1.00000i\n\n思路见解答\n解答#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;math.h&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    float a, b, c, x1, x2, x, real, imag;\n    scanf(&quot;%f%f%f&quot;, &amp;a, &amp;b, &amp;c);\n    if (b*b &gt; 4*a*c)&#123;\n    \tx1 &#x3D; (-b + sqrt(b*b - 4*a*c)) &#x2F; (2*a);\n   \t\tx2 &#x3D; (-b - sqrt(b*b - 4*a*c)) &#x2F; (2*a);\n   \t\tprintf(&quot;x1&#x3D;%.5f;x2&#x3D;%.5f&quot;, x1, x2);\n\t&#125;\n\telse if (b*b &#x3D;&#x3D; 4*a*c)&#123;\n\t\tx &#x3D; (-b + sqrt(b*b - 4*a*c)) &#x2F; (2*a);\n\t\tprintf(&quot;x1&#x3D;x2&#x3D;%.5f&quot;, x);\n\t&#125;\n\telse if (b*b &lt; 4*a*c)&#123;\n\t\tif (b &#x3D;&#x3D; 0)\n\t\t\treal &#x3D; 0.0;\n\t\telse real &#x3D; -b &#x2F; (2*a);\n\t\timag &#x3D; sqrt(4*a*c - b*b) &#x2F; (2*a);\n\t\tprintf(&quot;x1&#x3D;%.5f+%.5fi;x2&#x3D;%.5f-%.5fi&quot;, real, imag, real, imag);\n\t&#125;\n\treturn 0;\n&#125;\n","slug":"求一元二次方程的根","date":"2022-03-24T15:51:28.451Z","categories_index":"C++","tags_index":"C++,OpenJudge","author_index":"ARVIN"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-03-24T12:04:00.000Z","categories_index":"","tags_index":"","author_index":"ARVIN"}]